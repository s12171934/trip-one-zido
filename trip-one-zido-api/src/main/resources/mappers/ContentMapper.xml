<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.triponezidoapi.mappers.ContentMapper">
    <insert id="addContent" parameterType="com.example.triponezidoapi.dto.beforeUse.Content">
        INSERT INTO content
            (
            type,
            is_public,
            title
            )
        VALUES
            (
            #{type},
            #{isPublic},
            #{title}
            )
        <selectKey keyProperty="id" resultType="long">
            SELECT LAST_INSERT_ID();
        </selectKey>
    </insert>

    <insert id="addOwner" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestOwner">
        INSERT INTO owner
            (
            own,
            member_id,
            content_id
            )
        VALUE
            (
            #{own},
            #{memberId},
            #{contentId}
            )
    </insert>

    <delete id="deleteOwner" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestOwner">
        DELETE FROM owner
        WHERE
            member_id = #{memberId} AND
            content_id = #{contentId}
    </delete>

    <delete id="deleteContent" parameterType="long">
        DELETE FROM content
        WHERE id = #{id}
    </delete>

    <select id="getContentMembers" parameterType="long" resultType="com.example.triponezidoapi.dto.response.ResponseMember">
        SELECT
            m.id,
            m.login_id,
            m.profile,
            o.own
        FROM
            member m,
            owner o
        WHERE
            m.id = o.member_id AND
            o.content_id = #{id}
    </select>

    <select id="getWriter" parameterType="long" resultType="com.example.triponezidoapi.dto.response.ResponseMember">
        SELECT
            m.id,
            m.login_id,
            m.profile,
            o.own
        FROM
            member m,
            owner o
        WHERE
            m.id = o.member_id AND
            o.content_id = #{id} AND
            o.own = 'writer'
    </select>

    <update id="updateTitle" parameterType="com.example.triponezidoapi.dto.beforeUse.Content">
        UPDATE content
        SET
            title = #{title}
        WHERE
            id = #{id}
    </update>

    <update id="updateIsPublic" parameterType="com.example.triponezidoapi.dto.beforeUse.Content">
        UPDATE content
        SET
            is_public = #{isPublic}
        WHERE
            id = #{id}
    </update>

    <insert id="addPin" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestOwner">
        INSERT INTO pin
            (
            member_id,
            content_id
            )
        VALUE
            (
            #{memberId},
            #{contentId}
            )
    </insert>

    <delete id="deletePin" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestOwner">
        DELETE FROM pin
        WHERE
            member_id = #{memberId} AND
            content_id = #{contentId}
    </delete>

    <insert id="addGood" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestOwner">
        INSERT INTO good
            (
            good,
            member_id,
            content_id
            )
        VALUE
            (
            #{own},
            #{memberId},
            #{contentId}
            )
    </insert>

    <delete id="deleteGood" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestOwner">
        DELETE FROM good
        WHERE
            content_id = #{contentId} AND
            member_id = #{memberId}
    </delete>

    <select id="getRecentView" parameterType="com.example.triponezidoapi.dto.beforeUse.RequestListInfo" resultType="com.example.triponezidoapi.dto.response.ResponseContentList">
        SELECT
            c.id,
            c.title,
            sp.grade,
            (
            SELECT
                photo
            FROM
                photo
            WHERE
                content_id = c.id
            ) photo,
            (
            SELECT
                COUNT(*)
            FROM
                bookmark
            WHERE
                content_id = c.id
            ) bookmark_count,
            (
            SELECT
                COUNT(*)
            FROM
                bookmark
            WHERE
                content_id = c.id AND
                member_id = #{myMemberId}
            ) my_bookmark,
            (
            SELECT
                COUNT(*)
            FROM
                good
            WHERE
                content_id = c.id
            ) good_count
        FROM
            content c,
            (
            SELECT
                id,
                grade
            FROM spot
            UNION
            SELECT
                id,
                grade
            FROM plan
            ) sp,
            open_content o
        WHERE
            c.id = sp.id AND
            c.id = o.content_id
        ORDER BY
            opened_at DESC
    </select>
</mapper>
